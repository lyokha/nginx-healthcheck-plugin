# this nginx configuration file is for demonstration purpose only

user                    nobody;
worker_processes        4;

events {
    worker_connections  1024;
}

error_log               /tmp/nginx-test-error.log info;

http {
    default_type        application/octet-stream;
    sendfile            on;
    error_log           /tmp/nginx-test-error.log info;
    access_log          /tmp/nginx-test-access.log;

    upstream u_backend {
        server localhost:8020 fail_timeout=600s;
        server localhost:8030 fail_timeout=600s;
    }

    upstream u_backend0 {
        server localhost:8040 fail_timeout=600s;
        server localhost:8050 fail_timeout=600s backup;
    }

    upstream u_backend1 {
        server localhost:8060 fail_timeout=600s;
        server localhost:8050 fail_timeout=600s backup;
    }

#    upstrand us1 {
#        upstream u_backend blacklist_interval=10s;
#        upstream u_backend1 backup;
#        order per_request;
#        next_upstream_statuses error timeout 5xx;
#        next_upstream_timeout 10s;
#    }

    proxy_next_upstream error timeout http_502;

    haskell load /var/lib/nginx/ngx_healthcheck_prometheus.so;

    haskell_run_service checkPeers $hs_service_healthcheck
        'hs_service_healthcheck
         Conf { upstreams     = ["u_backend"
                                ,"u_backend0"
                                ,"u_backend1"
                                ]
              , interval      = Sec 5
              , peerTimeout   = Sec 2
              , endpoint      = Just Endpoint { epUrl = "/healthcheck"
                                              , epPassRule = DefaultPassRule
                                              }
              , sendStatsPort = Just 8100
              }
        ';

    haskell_service_update_hook updatePeers $hs_service_healthcheck;

    haskell_run_service checkPeers $hs_service_healthcheck0
        'hs_service_healthcheck0
         Conf { upstreams     = ["u_backend"]
              , interval      = Sec 5
              , peerTimeout   = Sec 2
              , endpoint      = Just Endpoint { epUrl = "/healthcheck"
                                              , epPassRule =
                                                      PassRuleByHttpStatus
                                                      [200, 404]
                                              }
              , sendStatsPort = Just 8100
              }
        ';

    haskell_service_update_hook updatePeers $hs_service_healthcheck0;

    haskell_run_service statsServer $hs_service_stats
        'StatsServerConf { ssPort          = 8100
                         , ssPurgeInterval = Min 5
                         }
        ';

    haskell_service_var_in_shm stats 64k /tmp $hs_service_stats;

    haskell_run_service simpleService_prometheusConf $hs_prometheus_conf
            'PrometheusConf
                { pcMetrics = fromList
                    [("cnt_upstream_failure"
                      ,"Number of servers which are currently failed")
                    ]
                , pcGauges = ["cnt_upstream_failure@upstream=(u_backend)"
                             ,"cnt_upstream_failure@upstream=(u_backend0)"
                             ,"cnt_upstream_failure@upstream=(u_backend1)"
                             ]
                , pcScale1000 = []
                }';

    server {
        listen          8010;
        server_name     main;

        location /pass {
            proxy_pass http://u_backend;
        }

        location /pass0 {
            proxy_pass http://u_backend0;
        }

        location /pass1 {
            proxy_pass http://u_backend1;
        }

#        location /pass_us1 {
#            proxy_pass http://$upstrand_us1;
#        }

        location /stat {
            allow 127.0.0.1;
            deny all;
            proxy_pass http://127.0.0.1:8100;
        }

        location /stat/merge {
            allow 127.0.0.1;
            deny all;

            counter $cnt_upstream_failure@upstream=(u_backend)
                    set $hs_n_u_backend;
            counter $cnt_upstream_failure@upstream=(u_backend0)
                    set $hs_n_u_backend0;
            counter $cnt_upstream_failure@upstream=(u_backend1)
                    set $hs_n_u_backend1;

            haskell_run_async makeSubrequestFull $hs_subrequest
                    '{"uri": "http://127.0.0.1:8100/stat/merge"}';
            haskell_run extractBodyFromFullResponse $hs_subrequest_body
                    $hs_subrequest;
            haskell_run mergedFlatStats $hs_failed_backends
                    $hs_subrequest_body;
            haskell_run nFailedServers $hs_n_u_backend
                    u_backend|$hs_failed_backends;
            haskell_run nFailedServers $hs_n_u_backend0
                    u_backend0|$hs_failed_backends;
            haskell_run nFailedServers $hs_n_u_backend1
                    u_backend1|$hs_failed_backends;

            haskell_content fromFullResponse $hs_subrequest;
        }

        location /metrics {
            allow 127.0.0.1;
            deny all;

            haskell_run_async makeSubrequest $hs_subrequest
                    '{"uri": "http://127.0.0.1:8010/stat/merge"}';
            haskell_async_content prometheusMetrics 
                    '["main", $cnt_collection, {}, {}]';
        }
    }
}

# vim: ft=nginx
